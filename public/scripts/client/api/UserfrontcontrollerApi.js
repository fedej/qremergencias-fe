/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateUserDTO', 'model/LoginUserDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateUserDTO'), require('../model/LoginUserDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.UserfrontcontrollerApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.CreateUserDTO, root.ApiDocumentation.LoginUserDTO);
  }
}(this, function(ApiClient, CreateUserDTO, LoginUserDTO) {
  'use strict';

  /**
   * Userfrontcontroller service.
   * @module api/UserfrontcontrollerApi
   * @version 1.0
   */

  /**
   * Constructs a new UserfrontcontrollerApi. 
   * @alias module:api/UserfrontcontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the changePasswordUsingPOST operation.
     * @callback module:api/UserfrontcontrollerApi~changePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changePassword
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.password 
     * @param {String} opts.newPassword 
     * @param {String} opts.confirmPassword 
     * @param {String} opts.recaptchaResponse 
     * @param {module:api/UserfrontcontrollerApi~changePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePasswordUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'password': opts['password'],
        'newPassword': opts['newPassword'],
        'confirmPassword': opts['confirmPassword'],
        'recaptchaResponse': opts['recaptchaResponse']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/userFront/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUsingPOST operation.
     * @callback module:api/UserfrontcontrollerApi~registerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginUserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register
     * @param {module:model/CreateUserDTO} model model
     * @param {module:api/UserfrontcontrollerApi~registerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginUserDTO}
     */
    this.registerUsingPOST = function(model, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling registerUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = LoginUserDTO;

      return this.apiClient.callApi(
        '/api/userFront/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordUsingPOST operation.
     * @callback module:api/UserfrontcontrollerApi~resetPasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resetPassword
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {String} opts.newPassword 
     * @param {String} opts.confirmPassword 
     * @param {String} opts.recaptchaResponse 
     * @param {module:api/UserfrontcontrollerApi~resetPasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetPasswordUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'token': opts['token'],
        'newPassword': opts['newPassword'],
        'confirmPassword': opts['confirmPassword'],
        'recaptchaResponse': opts['recaptchaResponse']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/userFront/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMailConfirmationUsingPOST operation.
     * @callback module:api/UserfrontcontrollerApi~sendMailConfirmationUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendMailConfirmation
     * @param {String} gRecaptchaResponse g-recaptcha-response
     * @param {String} username username
     * @param {module:api/UserfrontcontrollerApi~sendMailConfirmationUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendMailConfirmationUsingPOST = function(gRecaptchaResponse, username, callback) {
      var postBody = null;

      // verify the required parameter 'gRecaptchaResponse' is set
      if (gRecaptchaResponse == undefined || gRecaptchaResponse == null) {
        throw new Error("Missing the required parameter 'gRecaptchaResponse' when calling sendMailConfirmationUsingPOST");
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling sendMailConfirmationUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'g-recaptcha-response': gRecaptchaResponse,
        'username': username
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/userFront/sendMailConfirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
