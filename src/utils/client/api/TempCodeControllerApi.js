/**
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';

/**
* TempCodeController service.
* @module api/TempCodeControllerApi
* @version 1.0.0
*/
export default class TempCodeControllerApi {

    /**
    * Constructs a new TempCodeControllerApi. 
    * @alias module:api/TempCodeControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * verifyTempCode
     * @param {String} tempCode tempCode
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    verifyTempCodeUsingGETWithHttpInfo(tempCode) {
      let postBody = null;

      // verify the required parameter 'tempCode' is set
      if (tempCode === undefined || tempCode === null) {
        throw new Error("Missing the required parameter 'tempCode' when calling verifyTempCodeUsingGET");
      }


      let pathParams = {
        'tempCode': tempCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/tempCode/verify/{tempCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * verifyTempCode
     * @param {String} tempCode tempCode
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    verifyTempCodeUsingGET(tempCode) {
      return this.verifyTempCodeUsingGETWithHttpInfo(tempCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
