/**
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import EmergencyDataDTO from '../model/EmergencyDataDTO';
import PageOfChangesDTO from '../model/PageOfChangesDTO';

/**
* EmergencyDataController service.
* @module api/EmergencyDataControllerApi
* @version 1.0.0
*/
export default class EmergencyDataControllerApi {

    /**
    * Constructs a new EmergencyDataControllerApi. 
    * @alias module:api/EmergencyDataControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * createQR
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createQRUsingPOSTWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/emergencyData/qr', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * createQR
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createQRUsingPOST() {
      return this.createQRUsingPOSTWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteQR
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQRUsingDELETEWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/emergencyData/qr', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * deleteQR
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteQRUsingDELETE() {
      return this.deleteQRUsingDELETEWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getChanges
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageOfChangesDTO} and HTTP response
     */
    getChangesUsingGETWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PageOfChangesDTO;

      return this.apiClient.callApi(
        '/api/emergencyData/changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getChanges
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageOfChangesDTO}
     */
    getChangesUsingGET() {
      return this.getChangesUsingGETWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getEmergencyDataByUuid
     * @param {String} uuid uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    getEmergencyDataByUuidUsingGETWithHttpInfo(uuid) {
      let postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getEmergencyDataByUuidUsingGET");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/emergencyData/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getEmergencyDataByUuid
     * @param {String} uuid uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    getEmergencyDataByUuidUsingGET(uuid) {
      return this.getEmergencyDataByUuidUsingGETWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getEmergencyData
     * @param {String} userId userId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmergencyDataDTO} and HTTP response
     */
    getEmergencyDataUsingGETWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getEmergencyDataUsingGET");
      }


      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = EmergencyDataDTO;

      return this.apiClient.callApi(
        '/api/emergencyData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getEmergencyData
     * @param {String} userId userId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmergencyDataDTO}
     */
    getEmergencyDataUsingGET(userId) {
      return this.getEmergencyDataUsingGETWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getQR
     * @param {String} user user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getQRUsingGETWithHttpInfo(user) {
      let postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getQRUsingGET");
      }


      let pathParams = {
      };
      let queryParams = {
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = File;

      return this.apiClient.callApi(
        '/api/emergencyData/qr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getQR
     * @param {String} user user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getQRUsingGET(user) {
      return this.getQRUsingGETWithHttpInfo(user)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getQR
     * @param {String} user user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getQRUsingHEADWithHttpInfo(user) {
      let postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getQRUsingHEAD");
      }


      let pathParams = {
      };
      let queryParams = {
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = File;

      return this.apiClient.callApi(
        '/api/emergencyData/qr', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getQR
     * @param {String} user user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getQRUsingHEAD(user) {
      return this.getQRUsingHEADWithHttpInfo(user)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateEmergencyData
     * @param {module:model/EmergencyDataDTO} emergencyDataDTO emergencyDataDTO
     * @param {String} userId userId
     * @param {Boolean} qrUpdateRequired qrUpdateRequired
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateEmergencyDataUsingPATCHWithHttpInfo(emergencyDataDTO, userId, qrUpdateRequired) {
      let postBody = emergencyDataDTO;

      // verify the required parameter 'emergencyDataDTO' is set
      if (emergencyDataDTO === undefined || emergencyDataDTO === null) {
        throw new Error("Missing the required parameter 'emergencyDataDTO' when calling updateEmergencyDataUsingPATCH");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateEmergencyDataUsingPATCH");
      }

      // verify the required parameter 'qrUpdateRequired' is set
      if (qrUpdateRequired === undefined || qrUpdateRequired === null) {
        throw new Error("Missing the required parameter 'qrUpdateRequired' when calling updateEmergencyDataUsingPATCH");
      }


      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'qrUpdateRequired': qrUpdateRequired
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/emergencyData', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updateEmergencyData
     * @param {module:model/EmergencyDataDTO} emergencyDataDTO emergencyDataDTO
     * @param {String} userId userId
     * @param {Boolean} qrUpdateRequired qrUpdateRequired
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateEmergencyDataUsingPATCH(emergencyDataDTO, userId, qrUpdateRequired) {
      return this.updateEmergencyDataUsingPATCHWithHttpInfo(emergencyDataDTO, userId, qrUpdateRequired)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
