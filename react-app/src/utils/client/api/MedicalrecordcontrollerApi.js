/**
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MedicalRecordDTO from '../model/MedicalRecordDTO';
import PageOfMedicalRecordDTO from '../model/PageOfMedicalRecordDTO';

/**
* Medicalrecordcontroller service.
* @module api/MedicalrecordcontrollerApi
* @version 1.0.0
*/
export default class MedicalrecordcontrollerApi {

    /**
    * Constructs a new MedicalrecordcontrollerApi. 
    * @alias module:api/MedicalrecordcontrollerApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.text 
     * @param {Date} opts.performed 
     * @param {String} opts.user 
     * @param {File} opts.file file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {'String': 'String'}>} and HTTP response
     */
    createUsingPOST1WithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'text': opts['text'],
        'performed': opts['performed'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/api/medicalRecord', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * create
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.text 
     * @param {Date} opts.performed 
     * @param {String} opts.user 
     * @param {File} opts.file file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {'String': 'String'}>}
     */
    createUsingPOST1(opts) {
      return this.createUsingPOST1WithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUsingDELETEWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/medicalRecord/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * delete
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUsingDELETE(id) {
      return this.deleteUsingDELETEWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * findById
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MedicalRecordDTO} and HTTP response
     */
    findByIdUsingGETWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = MedicalRecordDTO;

      return this.apiClient.callApi(
        '/api/medicalRecord/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * findById
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MedicalRecordDTO}
     */
    findByIdUsingGET(id) {
      return this.findByIdUsingGETWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Results page you want to retrieve (0..N)
     * @param {Number} opts.size Number of records per page
     * @param {Array.<String>} opts.sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageOfMedicalRecordDTO} and HTTP response
     */
    listUsingGET1WithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PageOfMedicalRecordDTO;

      return this.apiClient.callApi(
        '/api/medicalRecord', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Results page you want to retrieve (0..N)
     * @param {Number} opts.size Number of records per page
     * @param {Array.<String>} opts.sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageOfMedicalRecordDTO}
     */
    listUsingGET1(opts) {
      return this.listUsingGET1WithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update
     * @param {String} id id
     * @param {module:model/MedicalRecordDTO} medicalRecord medicalRecord
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUsingPATCHWithHttpInfo(id, medicalRecord) {
      let postBody = medicalRecord;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUsingPATCH");
      }

      // verify the required parameter 'medicalRecord' is set
      if (medicalRecord === undefined || medicalRecord === null) {
        throw new Error("Missing the required parameter 'medicalRecord' when calling updateUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/medicalRecord/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * update
     * @param {String} id id
     * @param {module:model/MedicalRecordDTO} medicalRecord medicalRecord
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUsingPATCH(id, medicalRecord) {
      return this.updateUsingPATCHWithHttpInfo(id, medicalRecord)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
