/**
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserProfileDTO from '../model/UserProfileDTO';

/**
* Profilecontroller service.
* @module api/ProfilecontrollerApi
* @version 1.0.0
*/
export default class ProfilecontrollerApi {

    /**
    * Constructs a new ProfilecontrollerApi. 
    * @alias module:api/ProfilecontrollerApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserProfileDTO} and HTTP response
     */
    listUsingGET1WithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserProfileDTO;

      return this.apiClient.callApi(
        '/api/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserProfileDTO}
     */
    listUsingGET1() {
      return this.listUsingGET1WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update
     * @param {Object} opts Optional parameters
     * @param {String} opts.contacts0Id 
     * @param {String} opts.contacts0FirstName 
     * @param {String} opts.contacts0LastName 
     * @param {String} opts.contacts0PhoneNumber 
     * @param {String} opts.firstName 
     * @param {String} opts.lastName 
     * @param {String} opts.docNumber 
     * @param {Date} opts.birthDate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUsingPATCHWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'contacts[0].id': opts['contacts0Id'],
        'contacts[0].firstName': opts['contacts0FirstName'],
        'contacts[0].lastName': opts['contacts0LastName'],
        'contacts[0].phoneNumber': opts['contacts0PhoneNumber'],
        'firstName': opts['firstName'],
        'lastName': opts['lastName'],
        'docNumber': opts['docNumber'],
        'birthDate': opts['birthDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/profile', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * update
     * @param {Object} opts Optional parameters
     * @param {String} opts.contacts0Id 
     * @param {String} opts.contacts0FirstName 
     * @param {String} opts.contacts0LastName 
     * @param {String} opts.contacts0PhoneNumber 
     * @param {String} opts.firstName 
     * @param {String} opts.lastName 
     * @param {String} opts.docNumber 
     * @param {Date} opts.birthDate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUsingPATCH(opts) {
      return this.updateUsingPATCHWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
