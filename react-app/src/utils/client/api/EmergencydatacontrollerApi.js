/**
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import EmergencyDataDTO from '../model/EmergencyDataDTO';

/**
* Emergencydatacontroller service.
* @module api/EmergencydatacontrollerApi
* @version 1.0.0
*/
export default class EmergencydatacontrollerApi {

    /**
    * Constructs a new EmergencydatacontrollerApi. 
    * @alias module:api/EmergencydatacontrollerApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * getEmergencyData
     * @param {String} userId userId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmergencyDataDTO} and HTTP response
     */
    getEmergencyDataUsingGETWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getEmergencyDataUsingGET");
      }


      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = EmergencyDataDTO;

      return this.apiClient.callApi(
        '/api/emergencyData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getEmergencyData
     * @param {String} userId userId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmergencyDataDTO}
     */
    getEmergencyDataUsingGET(userId) {
      return this.getEmergencyDataUsingGETWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateEmergencyData
     * @param {module:model/EmergencyDataDTO} emergencyDataDTO emergencyDataDTO
     * @param {String} userId userId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateEmergencyDataUsingPATCHWithHttpInfo(emergencyDataDTO, userId) {
      let postBody = emergencyDataDTO;

      // verify the required parameter 'emergencyDataDTO' is set
      if (emergencyDataDTO === undefined || emergencyDataDTO === null) {
        throw new Error("Missing the required parameter 'emergencyDataDTO' when calling updateEmergencyDataUsingPATCH");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateEmergencyDataUsingPATCH");
      }


      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/emergencyData', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updateEmergencyData
     * @param {module:model/EmergencyDataDTO} emergencyDataDTO emergencyDataDTO
     * @param {String} userId userId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateEmergencyDataUsingPATCH(emergencyDataDTO, userId) {
      return this.updateEmergencyDataUsingPATCHWithHttpInfo(emergencyDataDTO, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
